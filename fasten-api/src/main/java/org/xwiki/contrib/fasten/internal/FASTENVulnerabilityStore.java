/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.contrib.fasten.internal;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.apache.commons.collections4.MapUtils;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.request.schema.SchemaRequest;
import org.apache.solr.common.SolrInputDocument;
import org.apache.solr.schema.FieldType;
import org.xwiki.component.annotation.Component;
import org.xwiki.component.phase.Initializable;
import org.xwiki.component.phase.InitializationException;
import org.xwiki.extension.ExtensionId;
import org.xwiki.extension.internal.converter.ExtensionIdConverter;
import org.xwiki.search.solr.Solr;
import org.xwiki.search.solr.SolrException;
import org.xwiki.search.solr.SolrUtils;
import org.xwiki.search.solr.internal.DefaultSolrUtils;

/**
 * @version $Id$
 */
@Component(roles = FASTENVulnerabilityStore.class)
@Singleton
public class FASTENVulnerabilityStore implements Initializable
{
    private static final String SOLR_FIELD_NAME = "name";

    private static final String SOLR_FIELD_PREFIX = "fasten_vulnerability_";

    private static final String SOLR_FIELD_IDS = SOLR_FIELD_PREFIX + "ids";

    private static final String SOLR_FIELD_DESCRIPTION_SUFFIX = "__" + SOLR_FIELD_PREFIX + "description";

    private static final String SOLR_FIELD_SEVERITY_SUFFIX = "__" + SOLR_FIELD_PREFIX + "severity";

    @Inject
    private Solr solr;

    @Inject
    private SolrUtils solrUtils;

    private SolrClient extensionIndexClient;

    @Override
    public void initialize() throws InitializationException
    {
        try {
            this.extensionIndexClient = this.solr.getClient("extension_index");
        } catch (SolrException e) {
            throw new InitializationException("Failed to get the Solr search core client", e);
        }

        // Make sure the schema contain the required fields
        try {
            setStringField(SOLR_FIELD_IDS, true, false);
            setStringField(getDescriptionFieldName("*"), false, true);
            setStringField(getSeverityFieldName("*"), false, true);
        } catch (Exception e) {
            throw new InitializationException("Failed to initialize the index", e);
        }
    }

    private String getDescriptionFieldName(String id)
    {
        return id + SOLR_FIELD_DESCRIPTION_SUFFIX;
    }

    private String getSeverityFieldName(String id)
    {
        return id + SOLR_FIELD_SEVERITY_SUFFIX;
    }

    private boolean exist(String name)
    {
        try {
            new SchemaRequest.Field(name).process(this.extensionIndexClient);
        } catch (Exception e) {
            return false;
        }

        return true;
    }

    private void setStringField(String name, boolean multiValued, boolean dynamic, Object... attributes)
        throws SolrServerException, IOException
    {
        setField(name, multiValued ? DefaultSolrUtils.SOLR_TYPE_STRINGS : DefaultSolrUtils.SOLR_TYPE_STRING, dynamic,
            attributes);
    }

    private void setField(String name, String type, boolean dynamic, Object... attributes)
        throws SolrServerException, IOException
    {
        Map<String, Object> fieldAttributes = new HashMap<>();
        fieldAttributes.put(SOLR_FIELD_NAME, name);
        fieldAttributes.put(FieldType.TYPE, type);

        MapUtils.putAll(fieldAttributes, attributes);

        setField(fieldAttributes, dynamic);
    }

    private void setField(Map<String, Object> fieldAttributes, boolean dynamic) throws SolrServerException, IOException
    {
        String name = (String) fieldAttributes.get(SOLR_FIELD_NAME);

        if (!exist(name)) {
            if (dynamic) {
                new SchemaRequest.AddDynamicField(fieldAttributes).process(this.extensionIndexClient);
            } else {
                new SchemaRequest.AddField(fieldAttributes).process(this.extensionIndexClient);
            }
        }
    }

    public void update(ExtensionId extensionId, List<FASTENVulnerability> vulnerabilities)
        throws SolrServerException, IOException
    {
        if (vulnerabilities.isEmpty()) {
            return;
        }

        SolrInputDocument solrDocument = new SolrInputDocument();

        this.solrUtils.set("id", ExtensionIdConverter.toString(extensionId), solrDocument);

        List<String> ids = new ArrayList<>(vulnerabilities.size());
        for (FASTENVulnerability vulnerability : vulnerabilities) {
            ids.add(vulnerability.getId());

            // Description
            this.solrUtils.setAtomic(SolrUtils.ATOMIC_UPDATE_MODIFIER_SET,
                getDescriptionFieldName(vulnerability.getId()), vulnerability.getDescription(), solrDocument);

            // Severity
            this.solrUtils.setAtomic(SolrUtils.ATOMIC_UPDATE_MODIFIER_SET, getSeverityFieldName(vulnerability.getId()),
                vulnerability.getSeverity(), solrDocument);
        }

        // Ids
        this.solrUtils.setAtomic(SolrUtils.ATOMIC_UPDATE_MODIFIER_SET, SOLR_FIELD_IDS, ids, solrDocument);

        this.extensionIndexClient.add(solrDocument);

        this.extensionIndexClient.commit();
    }
}
