/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.contrib.fasten.internal;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.slf4j.Logger;
import org.xwiki.component.annotation.Component;
import org.xwiki.component.manager.ComponentLifecycleException;
import org.xwiki.component.phase.Disposable;
import org.xwiki.component.phase.Initializable;
import org.xwiki.contrib.fasten.FASTENVulnerability;
import org.xwiki.extension.Extension;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Try to find risk associated with installed extension son FASTEN Knowledge Base server.
 * 
 * @version $Id$
 */
@Component(roles = FASTENVulnerabilityScanner.class)
@Singleton
public class FASTENVulnerabilityScanner implements Initializable, Disposable
{
    private static final String FASTEN_CENTRAL_URL = "https://api.fasten-project.eu/api";

    private static final String METADATA = "metadata";

    @Inject
    private Logger logger;

    private CloseableHttpClient httpClient;

    @Override
    public void initialize()
    {
        // Create an HTTP client
        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();
        httpClientBuilder.useSystemProperties();
        httpClientBuilder.setUserAgent("XWiki");
        this.httpClient = httpClientBuilder.build();
    }

    @Override
    public void dispose() throws ComponentLifecycleException
    {
        try {
            this.httpClient.close();
        } catch (IOException e) {
            this.logger.error("Failed to close the HTTP client", e);
        }
    }

    /**
     * @param extension the extension for which to find vulnerabilities
     * @return the vulnerabilities found in the passed extension
     * @throws IOException when failing to get extensions vulnerabilities
     */
    public List<FASTENVulnerability> scan(Extension extension) throws IOException
    {
        JsonNode json = getMetadata(extension);

        if (json != null) {
            JsonNode vulnerabilities = json.get(METADATA).get("vulnerabilities");
            if (vulnerabilities != null) {
                List<FASTENVulnerability> vulenabilityIds = new ArrayList<>(vulnerabilities.size());
                for (Iterator<Map.Entry<String, JsonNode>> it = vulnerabilities.fields(); it.hasNext();) {
                    Map.Entry<String, JsonNode> entry = it.next();

                    vulenabilityIds.add(new FASTENVulnerability(getStringValue(entry.getValue(), "id"),
                        getStringValue(entry.getValue(), "description"), getStringValue(entry.getValue(), "severity")));
                }

                return vulenabilityIds;
            }

            return Collections.emptyList();
        }

        return null;
    }

    private String getStringValue(JsonNode node, String key)
    {
        JsonNode child = node.get(key);

        return child != null ? child.asText() : null;
    }

    private JsonNode getMetadata(Extension extension) throws IOException
    {
        HttpGet getMethod = createMetadataPackageRequest(extension);
        getMethod.addHeader("Accept", "application/json");
        try (CloseableHttpResponse response = this.httpClient.execute(getMethod)) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                // The extension exist
                ObjectMapper objectMapper = new ObjectMapper();
                return objectMapper.readTree(response.getEntity().getContent());
            } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
                // This extension is unknown (for now)
                return null;
            } else {
                // Unknown error
                throw new IOException("Unexpected error when trying to retrieve FASTEN metadata for extension ["
                    + extension + "]: " + response.getStatusLine().getStatusCode());
            }
        }
    }

    private HttpGet createMetadataPackageRequest(Extension extension)
    {
        return new HttpGet(FASTEN_CENTRAL_URL + URLEncodedUtils.formatSegments("mvn", "packages",
            extension.getId().getId(), extension.getId().getVersion().getValue(), METADATA));
    }
}
